using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable disable
namespace ProjectMonitors.Monitor.App.Sites.PsDirect
{
  public class PlayStationDirectData
  {
    [JsonPropertyName("products")] public List<PlayStationDirectProductData> Products { get; set; }
  }

  public class PlayStationDirectProductData
  {
    [JsonPropertyName("name")] public string Name { get; set; }
    [JsonPropertyName("price")] public PlayStationDirectPriceData Price { get; set; }
    [JsonPropertyName("stock")] public PlayStationDirecStockData Stock { get; set; }
  }

  public class PlayStationDirectPriceData
  {
    [JsonPropertyName("value")] public decimal Value { get; set; }
  }

  public class PlayStationDirecStockData
  {
    [JsonPropertyName("stockLevelStatus")] public string StockLevelStatus { get; set; }
  }

  /*// <auto-generated />
  //
  // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
  //
  //    using QuickType;
  //
  //    var playStationDirectData = PlayStationDirectData.FromJson(jsonString);

  namespace QuickType
  {
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PlayStationDirectData
    {
      [JsonProperty("currentPage")] public long CurrentPage { get; set; }

      [JsonProperty("products")] public Product[] Products { get; set; }

      [JsonProperty("totalPageCount")] public long TotalPageCount { get; set; }

      [JsonProperty("totalProductCount")] public long TotalProductCount { get; set; }
    }

    public partial class Product
    {
      [JsonProperty("baseProduct")] public string BaseProduct { get; set; }

      [JsonProperty("categoryHierarchy")] public CategoryHierarchy[] CategoryHierarchy { get; set; }

      [JsonProperty("code")]
      [JsonConverter(typeof(ParseStringConverter))]
      public long Code { get; set; }

      [JsonProperty("compatibilityNotices")] public CompatibilityNotice[] CompatibilityNotices { get; set; }

      [JsonProperty("legalDisclosure")] public string LegalDisclosure { get; set; }

      [JsonProperty("loginGated")] public bool LoginGated { get; set; }

      [JsonProperty("longDescription")] public string LongDescription { get; set; }

      [JsonProperty("longDescriptionHeader")]
      public string LongDescriptionHeader { get; set; }

      [JsonProperty("maxOrderQuantity")] public long MaxOrderQuantity { get; set; }

      [JsonProperty("name")] public string Name { get; set; }

      [JsonProperty("overline")] public string Overline { get; set; }

      [JsonProperty("preOrderProduct")] public bool PreOrderProduct { get; set; }

      [JsonProperty("price")] public Price Price { get; set; }

      [JsonProperty("primaryCategoryName")] public string PrimaryCategoryName { get; set; }

      [JsonProperty("purchasable")] public bool Purchasable { get; set; }

      [JsonProperty("releaseDateDisplay")] public string ReleaseDateDisplay { get; set; }

      [JsonProperty("sieProductFeatures")] public string[] SieProductFeatures { get; set; }

      [JsonProperty("stock")] public Stock Stock { get; set; }

      [JsonProperty("streetDate")] public DateTimeOffset StreetDate { get; set; }

      [JsonProperty("url")] public string Url { get; set; }

      [JsonProperty("validProductCode")] public bool ValidProductCode { get; set; }
    }

    public partial class CategoryHierarchy
    {
      [JsonProperty("code")] public string Code { get; set; }

      [JsonProperty("name")] public string Name { get; set; }
    }

    public partial class CompatibilityNotice
    {
      [JsonProperty("isBold")] public bool IsBold { get; set; }

      [JsonProperty("text")] public string Text { get; set; }
    }

    public partial class Price
    {
      [JsonProperty("basePrice")]
      [JsonConverter(typeof(ParseStringConverter))]
      public long BasePrice { get; set; }

      [JsonProperty("currencyIso")] public string CurrencyIso { get; set; }

      [JsonProperty("currencySymbol")] public string CurrencySymbol { get; set; }

      [JsonProperty("decimalPrice")]
      [JsonConverter(typeof(ParseStringConverter))]
      public long DecimalPrice { get; set; }

      [JsonProperty("value")] public double Value { get; set; }
    }

    public partial class Stock
    {
      [JsonProperty("stockLevelStatus")] public string StockLevelStatus { get; set; }
    }

    public partial class PlayStationDirectData
    {
      public static PlayStationDirectData FromJson(string json) =>
        JsonConvert.DeserializeObject<PlayStationDirectData>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
      public static string ToJson(this PlayStationDirectData self) =>
        JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
      public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
      {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
        {
          new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
        },
      };
    }

    internal class ParseStringConverter : JsonConverter
    {
      public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

      public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
      {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        long l;
        if (Int64.TryParse(value, out l))
        {
          return l;
        }

        throw new Exception("Cannot unmarshal type long");
      }

      public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
      {
        if (untypedValue == null)
        {
          serializer.Serialize(writer, null);
          return;
        }

        var value = (long) untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
      }

      public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
  }*/
}